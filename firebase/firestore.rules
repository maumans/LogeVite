rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Règles de sécurité Firestore pour LogeVite
    // Compatibles avec Firebase Web SDK et React Native Firebase
    
    // Fonctions d'aide
    function estAuthentifie() {
      return request.auth != null;
    }
    
    function estProprietaire(idUtilisateur) {
      return request.auth.uid == idUtilisateur;
    }
    
    function estTypeUtilisateurValide(type) {
      return type in ['particulier', 'professionnel'];
    }
    
    function estTypeProfessionnelValide(type) {
      return type in ['agence', 'demarcheur', 'promoteur'];
    }
    
    function estStatutAnnonceValide(statut) {
      return statut in ['active', 'inactive', 'vendue', 'louee', 'brouillon'];
    }
    
    function estTypeBienValide(type) {
      return type in ['appartement', 'maison', 'villa', 'terrain', 'bureau', 'commerce', 'entrepot'];
    }
    
    function estTypeTransactionValide(type) {
      return type in ['vente', 'location'];
    }

    // Collection utilisateurs
    match /utilisateurs/{idUtilisateur} {
      allow read: if estAuthentifie();
      allow create: if estAuthentifie() && 
                       estProprietaire(idUtilisateur) &&
                       estTypeUtilisateurValide(resource.data.typeUtilisateur) &&
                       (resource.data.typeUtilisateur != 'professionnel' || 
                        estTypeProfessionnelValide(resource.data.typeProfessionnel));
      allow update: if estAuthentifie() && 
                       estProprietaire(idUtilisateur) &&
                       (resource.data.typeUtilisateur == request.resource.data.typeUtilisateur) &&
                       (resource.data.typeUtilisateur != 'professionnel' || 
                        estTypeProfessionnelValide(request.resource.data.typeProfessionnel));
      allow delete: if estAuthentifie() && estProprietaire(idUtilisateur);
      
      // Sous-collection préférences utilisateur
      match /preferences/{document=**} {
        allow read, write: if estAuthentifie() && estProprietaire(idUtilisateur);
      }
      
      // Sous-collection abonnements utilisateur
      match /abonnements/{document=**} {
        allow read, write: if estAuthentifie() && estProprietaire(idUtilisateur);
      }
    }

    // Collection annonces
    match /annonces/{idAnnonce} {
      allow read: if estAuthentifie() && 
                     resource.data.statut == 'active';
      allow read: if estAuthentifie() && 
                     estProprietaire(resource.data.idProprietaire);
      allow create: if estAuthentifie() && 
                       estProprietaire(resource.data.idProprietaire) &&
                       estStatutAnnonceValide(resource.data.statut) &&
                       estTypeBienValide(resource.data.typeBien) &&
                       estTypeTransactionValide(resource.data.typeTransaction) &&
                       resource.data.prix is number &&
                       resource.data.prix > 0 &&
                       resource.data.localisation.latitude is number &&
                       resource.data.localisation.longitude is number &&
                       resource.data.images is list;
      allow update: if estAuthentifie() && 
                       estProprietaire(resource.data.idProprietaire) &&
                       estStatutAnnonceValide(request.resource.data.statut) &&
                       request.resource.data.idProprietaire == resource.data.idProprietaire;
      allow delete: if estAuthentifie() && 
                       estProprietaire(resource.data.idProprietaire);
      
      // Sous-collection statistiques annonce
      match /statistiques/{document=**} {
        allow read: if estAuthentifie() && estProprietaire(resource.data.idProprietaire);
        allow write: if false; // Seules les fonctions cloud peuvent écrire les statistiques
      }
    }

    // Collection demandes (particuliers)
    match /demandes/{idDemande} {
      allow read: if estAuthentifie() && 
                     estProprietaire(resource.data.idUtilisateur);
      allow create: if estAuthentifie() && 
                       estProprietaire(resource.data.idUtilisateur) &&
                       resource.data.budgetMin is number &&
                       resource.data.budgetMax is number &&
                       resource.data.budgetMin <= resource.data.budgetMax &&
                       estTypeBienValide(resource.data.typeBien) &&
                       estTypeTransactionValide(resource.data.typeTransaction) &&
                       resource.data.localisation.latitude is number &&
                       resource.data.localisation.longitude is number;
      allow update: if estAuthentifie() && 
                       estProprietaire(resource.data.idUtilisateur) &&
                       request.resource.data.idUtilisateur == resource.data.idUtilisateur;
      allow delete: if estAuthentifie() && 
                       estProprietaire(resource.data.idUtilisateur);
      
      // Sous-collection correspondances demande
      match /correspondances/{document=**} {
        allow read: if estAuthentifie() && estProprietaire(resource.data.idUtilisateur);
        allow write: if false; // Seules les fonctions cloud peuvent écrire les correspondances
      }
    }

    // Collection conversations
    match /conversations/{idConversation} {
      allow read: if estAuthentifie() && 
                     request.auth.uid in resource.data.participants;
      allow create: if estAuthentifie() && 
                       request.auth.uid in resource.data.participants &&
                       resource.data.participants.size() == 2;
      allow update: if estAuthentifie() && 
                       request.auth.uid in resource.data.participants &&
                       request.resource.data.participants == resource.data.participants;
      
      // Sous-collection messages
      match /messages/{idMessage} {
        allow read: if estAuthentifie() && 
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(idConversation)).data.participants;
        allow create: if estAuthentifie() && 
                         estProprietaire(resource.data.idExpediteur) &&
                         request.auth.uid in get(/databases/$(database)/documents/conversations/$(idConversation)).data.participants;
        allow update: if estAuthentifie() && 
                         estProprietaire(resource.data.idExpediteur);
      }
    }

    // Collection favoris
    match /favoris/{idFavori} {
      allow read, write: if estAuthentifie() && 
                            estProprietaire(resource.data.idUtilisateur);
    }

    // Collection avis
    match /avis/{idAvis} {
      allow read: if estAuthentifie();
      allow create: if estAuthentifie() && 
                       estProprietaire(resource.data.idEvaluateur) &&
                       resource.data.note is number &&
                       resource.data.note >= 1 &&
                       resource.data.note <= 5;
      allow update: if estAuthentifie() && 
                       estProprietaire(resource.data.idEvaluateur);
      allow delete: if estAuthentifie() && 
                       estProprietaire(resource.data.idEvaluateur);
    }

    // Collection signalements
    match /signalements/{idSignalement} {
      allow read: if false; // Seuls les admins peuvent lire les signalements
      allow create: if estAuthentifie() && 
                       estProprietaire(resource.data.idSignaleur) &&
                       resource.data.raison is string &&
                       resource.data.typeCible in ['annonce', 'utilisateur', 'message'];
      allow update, delete: if false; // Seuls les admins peuvent modifier les signalements
    }

    // Collection notifications
    match /notifications/{idNotification} {
      allow read: if estAuthentifie() && 
                     estProprietaire(resource.data.idUtilisateur);
      allow update: if estAuthentifie() && 
                       estProprietaire(resource.data.idUtilisateur) &&
                       request.resource.data.idUtilisateur == resource.data.idUtilisateur;
      allow create, delete: if false; // Seules les fonctions cloud peuvent créer/supprimer les notifications
    }

    // Collections admin (restreintes)
    match /admin/{document=**} {
      allow read, write: if false; // Seuls les utilisateurs admin avec droits personnalisés
    }

    // Collections statistiques
    match /statistiques/{document=**} {
      allow read, write: if false; // Seules les fonctions cloud
    }

    // Plans d'abonnement
    match /plansAbonnement/{idPlan} {
      allow read: if estAuthentifie();
      allow write: if false; // Seuls les admins
    }

    // Transactions de paiement
    match /transactions/{idTransaction} {
      allow read: if estAuthentifie() && 
                     estProprietaire(resource.data.idUtilisateur);
      allow write: if false; // Seules les fonctions cloud
    }
  }
}
