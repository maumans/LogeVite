rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Règles de sécurité Storage pour LogeVite
    // Compatibles avec Firebase Web SDK et React Native Firebase
    
    // Fonctions d'aide
    function estAuthentifie() {
      return request.auth != null;
    }
    
    function estProprietaire(idUtilisateur) {
      return request.auth.uid == idUtilisateur;
    }
    
    function estTypeImageValide() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function estTailleImageValide() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB max
    }
    
    function estTypeDocumentValide() {
      return request.resource.contentType in [
        'application/pdf',
        'image/jpeg',
        'image/png',
        'image/webp'
      ];
    }

    // Photos de profil
    match /utilisateurs/{idUtilisateur}/profil/{nomFichier} {
      allow read: if estAuthentifie();
      allow write: if estAuthentifie() && 
                      estProprietaire(idUtilisateur) &&
                      estTypeImageValide() &&
                      estTailleImageValide();
      allow delete: if estAuthentifie() && estProprietaire(idUtilisateur);
    }

    // Images d'annonces
    match /annonces/{idAnnonce}/{nomFichier} {
      allow read: if estAuthentifie();
      allow write: if estAuthentifie() && 
                      estTypeImageValide() &&
                      estTailleImageValide() &&
                      // Vérifier que l'utilisateur possède l'annonce
                      exists(/databases/(default)/documents/annonces/$(idAnnonce)) &&
                      get(/databases/(default)/documents/annonces/$(idAnnonce)).data.idProprietaire == request.auth.uid;
      allow delete: if estAuthentifie() &&
                       exists(/databases/(default)/documents/annonces/$(idAnnonce)) &&
                       get(/databases/(default)/documents/annonces/$(idAnnonce)).data.idProprietaire == request.auth.uid;
    }

    // Pièces jointes des messages de chat
    match /conversations/{idConversation}/messages/{idMessage}/{nomFichier} {
      allow read: if estAuthentifie() &&
                     // Vérifier que l'utilisateur participe à la conversation
                     exists(/databases/(default)/documents/conversations/$(idConversation)) &&
                     request.auth.uid in get(/databases/(default)/documents/conversations/$(idConversation)).data.participants;
      allow write: if estAuthentifie() &&
                      (estTypeImageValide() || estTypeDocumentValide()) &&
                      estTailleImageValide() &&
                      // Vérifier que l'utilisateur participe à la conversation
                      exists(/databases/(default)/documents/conversations/$(idConversation)) &&
                      request.auth.uid in get(/databases/(default)/documents/conversations/$(idConversation)).data.participants;
      allow delete: if estAuthentifie() &&
                       exists(/databases/(default)/documents/conversations/$(idConversation)/messages/$(idMessage)) &&
                       get(/databases/(default)/documents/conversations/$(idConversation)/messages/$(idMessage)).data.idExpediteur == request.auth.uid;
    }

    // Documents professionnels (KYC)
    match /utilisateurs/{idUtilisateur}/documents/{nomFichier} {
      allow read: if estAuthentifie() && estProprietaire(idUtilisateur);
      allow write: if estAuthentifie() && 
                      estProprietaire(idUtilisateur) &&
                      estTypeDocumentValide() &&
                      request.resource.size < 20 * 1024 * 1024; // 20MB pour les documents
      allow delete: if estAuthentifie() && estProprietaire(idUtilisateur);
    }

    // Logos d'entreprise pour les professionnels
    match /utilisateurs/{idUtilisateur}/entreprise/{nomFichier} {
      allow read: if estAuthentifie();
      allow write: if estAuthentifie() && 
                      estProprietaire(idUtilisateur) &&
                      estTypeImageValide() &&
                      estTailleImageValide();
      allow delete: if estAuthentifie() && estProprietaire(idUtilisateur);
    }

    // Téléchargements temporaires (pour traitement)
    match /temporaire/{idUtilisateur}/{nomFichier} {
      allow write: if estAuthentifie() && 
                      estProprietaire(idUtilisateur) &&
                      (estTypeImageValide() || estTypeDocumentValide()) &&
                      estTailleImageValide();
      allow read, delete: if estAuthentifie() && estProprietaire(idUtilisateur);
    }

    // Ressources publiques (ressources de l'app, etc.)
    match /public/{tousChemins=**} {
      allow read: if true;
      allow write: if false; // Seuls les admins/fonctions cloud
    }

    // Téléchargements admin
    match /admin/{tousChemins=**} {
      allow read, write: if false; // Seuls les utilisateurs admin avec droits personnalisés
    }

    // Fichiers de sauvegarde
    match /sauvegardes/{tousChemins=**} {
      allow read, write: if false; // Seules les fonctions cloud
    }
  }
}
